// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/match_frontend.proto

package match_frontend

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MatchFrontend service

func NewMatchFrontendEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MatchFrontend service

type MatchFrontendService interface {
	EnterMatch(ctx context.Context, in *EnterMatchReq, opts ...client.CallOption) (*EnterMatchRsp, error)
	LevelMatch(ctx context.Context, in *LevelMatchReq, opts ...client.CallOption) (*LevelMatchRsp, error)
	GetMatchInfo(ctx context.Context, in *GetMatchInfoReq, opts ...client.CallOption) (*GetMatchInfoRsp, error)
}

type matchFrontendService struct {
	c    client.Client
	name string
}

func NewMatchFrontendService(name string, c client.Client) MatchFrontendService {
	return &matchFrontendService{
		c:    c,
		name: name,
	}
}

func (c *matchFrontendService) EnterMatch(ctx context.Context, in *EnterMatchReq, opts ...client.CallOption) (*EnterMatchRsp, error) {
	req := c.c.NewRequest(c.name, "MatchFrontend.EnterMatch", in)
	out := new(EnterMatchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchFrontendService) LevelMatch(ctx context.Context, in *LevelMatchReq, opts ...client.CallOption) (*LevelMatchRsp, error) {
	req := c.c.NewRequest(c.name, "MatchFrontend.LevelMatch", in)
	out := new(LevelMatchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchFrontendService) GetMatchInfo(ctx context.Context, in *GetMatchInfoReq, opts ...client.CallOption) (*GetMatchInfoRsp, error) {
	req := c.c.NewRequest(c.name, "MatchFrontend.GetMatchInfo", in)
	out := new(GetMatchInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MatchFrontend service

type MatchFrontendHandler interface {
	EnterMatch(context.Context, *EnterMatchReq, *EnterMatchRsp) error
	LevelMatch(context.Context, *LevelMatchReq, *LevelMatchRsp) error
	GetMatchInfo(context.Context, *GetMatchInfoReq, *GetMatchInfoRsp) error
}

func RegisterMatchFrontendHandler(s server.Server, hdlr MatchFrontendHandler, opts ...server.HandlerOption) error {
	type matchFrontend interface {
		EnterMatch(ctx context.Context, in *EnterMatchReq, out *EnterMatchRsp) error
		LevelMatch(ctx context.Context, in *LevelMatchReq, out *LevelMatchRsp) error
		GetMatchInfo(ctx context.Context, in *GetMatchInfoReq, out *GetMatchInfoRsp) error
	}
	type MatchFrontend struct {
		matchFrontend
	}
	h := &matchFrontendHandler{hdlr}
	return s.Handle(s.NewHandler(&MatchFrontend{h}, opts...))
}

type matchFrontendHandler struct {
	MatchFrontendHandler
}

func (h *matchFrontendHandler) EnterMatch(ctx context.Context, in *EnterMatchReq, out *EnterMatchRsp) error {
	return h.MatchFrontendHandler.EnterMatch(ctx, in, out)
}

func (h *matchFrontendHandler) LevelMatch(ctx context.Context, in *LevelMatchReq, out *LevelMatchRsp) error {
	return h.MatchFrontendHandler.LevelMatch(ctx, in, out)
}

func (h *matchFrontendHandler) GetMatchInfo(ctx context.Context, in *GetMatchInfoReq, out *GetMatchInfoRsp) error {
	return h.MatchFrontendHandler.GetMatchInfo(ctx, in, out)
}
